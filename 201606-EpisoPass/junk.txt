

































 

EpisoPass
パスワード│
シード文字列
エピソード記憶
秘密の質問

EpisoPass: Password Management based on Episodic Memories



EpisoPass: エピソード記憶にもとづくパスワード管理

EpisoPass: Password Management based on Episodic Memories

増井俊之Toshiyuki Masui, 慶應義塾大学 環境情報学部


忘れることがないエピソード記憶にもとづく秘密の質問を使って強力なパスワードを生成/管理するシステム「」を提案する。
EpisoPassは、ユーザが作成した秘密の質問への回答にもとづいてシード文字列を換字することによってパスワードを生成する。
シード文字列や回答のバリエーションにより異なるパスワードが生成されるので様々なサービスに対して異なるパスワードを生成できることに加え、
シード文字列を逆計算することにより既存のパスワードの管理もできる。
適切な運用により、パスワードに関連するあらゆる情報を秘密にすることなく
強力なパスワードの生成/管理が可能である。












はじめに

個人認証のためにパスワードが現在広く利用されている。
パスワード認証には多くの問題があることが知られているが、
今後も長期にわたって利用され続けると予想されるため、
問題点を認識しつつ
適切に運用するための工夫が必要である。

パスワードの長期的記憶が難しいことはパスワード認証の大きな問題点のひとつである。
安全に運用するためにはパスワードはランダムで長い文字列であることが望ましいが、
そのようなものを頭の中に記憶しておくことは難しい。
また複数のサービスを利用する場合、
サービスごとに異なるパスワードを利用することが望ましいが、
すべてのパスワードを記憶しておくことはほとんど不可能である。

Florencioの2007年の大規模な調査によれば、
ユーザは平均25個のサイトで6.5個のパスワードを利用しており、
3ヶ月間にユーザの4.28がパスワードを忘れていた。
また2011年の野村総研の調査によれば、
一般的なユーザがパスワード認証を行なうサイトは平均19.4個で、
利用しているパスワードは平均3.1個であった。
多数のパスワードを記憶することが困難であるため、
多くのユーザが同じパスワードを複数サイトで使い回しているのだと思われる。

異なるパスワードをすべて記憶することは不可能なのでどこかに記録しておく必要があるが、
パスワード文字列をそのまま記録するのは危険なので、
複数のパスワードを秘密情報として扱うためのパスワード管理システムが利用されている。
パスワード管理システムは
ひとつの「マスターパスワード」を利用して他のすべてのパスワードを管理するもので、
暗号化されたデータベースにパスワードを格納するもの







が多いが、サービス名をもとにマスターパスワードを変換することによって
複数のパスワードを生成するシステムもある。


両者ともにマスターパスワードの記憶は必須であり、
マスターパスワードを盗まれたり忘れたりする危険がある。


一般にユーザはパスワードを忘れがちであるため、
多くのサービスにおいてパスワードを復元したり初期化したりする手段が用意されている。
ユーザが秘密の質問に対する答を登録し、
質問に正しく回答することによってパスワードを復元したりリセットできるサービスは多いし、
秘密の質問に答えることによって
パスワード管理システムのマスターパスワードを復元するシステムも提案されている。

新しく覚えた情報や新しく考えた情報はどうしても忘れてしまう可能性があるので、
新しく作成したパスワード文字列を記憶して認証に利用することは本質的に無理がある。
一方、既知で忘れることがないエピソード記憶を秘密の質問として
認証のために直接利用することができれば、
認証に必要な情報を忘れてしまうことがないはずである。
多くの画像認証システムは
秘密の質問に対して適切な操作を行なうことによって認証を行なっているため
パスワードのようなものを記憶する必要がない。




画像認証システムはまだ普及しておらず利用できる環境は限られているが、
忘れないエピソード記憶を利用した秘密の質問への回答を強力なパスワードに変換するシステムがあれば、
通常のパスワード認証を用いた現在の様々なサービス上で、
認証方法を忘れる心配なく安全に認証を行なうことができるようになる。
本論文ではこのようなシステム「EpisoPass」について述べる。

EpisoPass

EpisoPassの原理

EpisoPassは、
ユーザが忘れることがない個人的なエピソード記憶を文字列に変換することによって
安全なパスワードを生成するシステムである。
パスワード文字列は以下の手順で生成される。


パスワード生成の「種」となる文字列を用意する。
以下ではこれを「シード文字列」と表現する。
忘れることがない個人的なエピソード記憶にもとづく秘密の質問を複数作成し、
それぞれについてひとつの正答と複数の偽答を用意する。
質問と回答の組にもとづいてシード文字列に換字操作を行なう。
すべてに正しく回答したとき生成される文字列をパスワードとして利用する。


EpisoPass利用例

以下にEpisoPassの利用例を示す。

ブラウザでの利用

筆者がtwitterのパスワードを生成するために
ブラウザでEpisoPassを利用している例を図に示す 

。
シード文字列として「Twitter123456」という文字列を指定しており、
4個の秘密の質問に対する回答選択に応じて
「Mfveabn574923」のようなパスワード候補が生成される。
異なる答をを選択すると全く異なる文字列が生成される。
シード文字列の8文字目が数字である場合はパスワードの8文字目も数字になるなど、
シード文字列の文字種に対応したパスワード候補が生成される。

最初の秘密の質問は筆者の小学校の同級生に関するもので、
最後の質問は数年前の体験に関するものである。
これらの質問は古いエピソード記憶にもとづいており、
筆者が将来答を忘れることはほとんど考えられないが、
本人以外がこのような質問に答えることは難しいので
正しいパスワードを得ることはできない。







秘密の質問と答はブラウザで編集でき、
右上の「サーバにセーブ」ボタンを押すことによりシード文字列、秘密の問題、答のリストがサーバにセーブされる。
「ファイルにセーブ」ボタンを押すとJSONデータをパソコンにダウンロードでき、
パソコン上のJSONデータをブラウザにドラッグドロップするとサーバにアップロードできる。
ユーザはどれが正答かを指定するわけではないので
問題データを見てもユーザのパスワードはわからない。

シード文字列を「Facebook123456」に変更すると、生成されるパスワードは図のように変化する。
このように、サービスごとに異なるシード文字列を利用することによって
様々なパスワードを簡単に生成できる。







パスワードとして大文字/小文字英数字と記号をすべて利用しなければならないサービスの場合は
シード文字列に「PassWord123!@」のような文字列を指定すればよい。

回答選択によりパスワードを切り換え


サービスごとにシード文字列を変えるのではなく、
図のように
サービス名に応じて回答を変えることによって異なるパスワードを作成することも可能である。
パスワードとしての長さや文字種に特種な制約が無いサービスに関してはこの方法が便利である。








定期的にパスワード変更を求められるシステムでは、
「利用期間は?」という質問に対して
「2013/1」「2013/2」のような答を用意しておけば、
時期を選択することによって簡単にパスワードを変更することができるので便利である。

既存パスワードの利用

現在``Masui1234''のようなパスワードを利用している場合、

図のようにパスワード欄に現在のパスワードを入力すれば
それを生成するシード文字列が自動生成されるので、
生成されたシード文字列を記録しておけばよい。







パスワード以外の秘密の文字列も管理することができる。
たとえば自転車の鍵番号「1234」をEpisoPassで管理したい場合、
「jitensha-0000」というシード文字列を入力した後で
パスワード枠の数字を「1234」に変更することにより、
図のように「jitensha-6145」というシード文字列で
鍵番号を管理できるようになる。







既存のパスワード管理システムは、
利用中のパスワードを記憶するもの







と新しいパスワードを生成するもの

に分類されるが、
EpisoPassはこの両方をサポートしている。

Androidアプリ

Webサービスを利用する場合、ブラウザとサーバとの間の通信を
記録されたり盗み見されたりされる心配を完全に払拭することはできない。

前述の例において、
パスワードはブラウザ内部でJavaScriptにより生成されるので、
一度ページを表示した後は
ネットワークを遮断してもパスワード計算を行なえるようになっているが、
最初から全く通信を行なわずにパスワードを作成できる方がより安心であろう。
このため、通信を全く行なわずにマシン単体でパスワード計算を行なうための
Androidアプリを用意した。
ページの右上の「Androidアプリ」ボタンを押すと、
現在表示している秘密の問題と答を内蔵したAndroidアプリが
サーバ上でビルドされてダウンロードされる。

Android端末でアプリを実行すると図のような画面が表示される。
シード文字列を設定して「開始」ボタンを押すと図のように質問がひとつずつ表示され、
ボタンを押してすべて回答するとパスワードが計算され図のように表示される。



















回答入力とパスワード計算はAndroid端末で実行されるため、
端末を「機内モード」に設定するなどの方法で
ネットワーク接続を遮断した状態でもパスワードを計算することができる。
EpisoPassをインストールしたAndroid端末を持っていれば常に各種のパスワードを計算できるので、
他人のマシンや公共の場所に設置されたパソコンなどでも
容易にtwitterなどのネットサービスを利用することができる。

前述の方法でEpisoPassアプリをサーバからダウンロードする場合は、
ブラウザ上で秘密の問題をサーバに登録する必要があるが、
秘密の問題を全くネット上に露出することなくアプリを利用することもできる。
秘密の問題を含まないEpisoPassアプリをGoogle Playで公開 

しているので、
これを端末にインストールした後、
ローカルマシンで作成した秘密の質問を端末に転送すれば
EpisoPass.comからダウンロードしたアプリと同様に利用できる。
この手法を使うと秘密の質問が通信路を通ることがないので安全であるが、
アプリのセットアップの手間は増える。

パスワード文字列の計算方法

問題と回答から文字列を生成し、そのMD5値によってシード文字列を換字することにより
パスワードを生成している。
パスワード文字列の計算方法は附録に示す。

議論

EpisoPassの利便性、安全性、運用の問題などについて考察する。

運用形態と安全性

パスワード管理システムにおいて最も重要なのは安全性である。

EpisoPassは様々な運用方法が可能であり、
運用形態によって安全性の評価が異なるので、
利用例にもとづいてEpisoPassの安全性を考える。

の利用を秘密にする場合


パスワード管理にEpisoPassを利用していることを公開せず、
単なるパスワード生成機として利用する場合は、
普通にパスワードを利用する場合に比べて安全度が低下することは無い。
パスワードとして充分強力な文字列をシード文字列として利用すれば
EpisoPassによって換字された文字列もパスワードとして強力だと考えられるし、
推測しやすい文字列をシード文字列として設定した場合であっても
ランダムな換字操作によってより強力なパスワードが生成されるので、
EpisoPassを利用するデメリットは無く、
通常のパスワード管理システムと同様の方法で利用できる。

シード文字列を秘密にする場合


EpisoPassの秘密の質問を公開した場合でも、
シード文字列を通常のパスワードと同じレベルで秘密にしておけば
SuperGenPassと同じレベルの利便性と安全性が確保できる。
で述べた方法を利用することにより、
ひとつのシード文字列から複数のパスワードを生成することができる。

すべて公開する場合


秘密の質問を解くことが不可能であれば、
シード文字列と秘密の質問をすべて公開しても安全である。
この場合、
ユーザは秘密の質問とシード文字列を通常のテキストデータと同じように管理できるし、
パスワード管理のために新しく記憶しなければならない情報が皆無なので、
ユーザはパスワード管理について注意を払う必要が無くなり気が楽になる。

秘密の質問を解くことを困難にするためには質問の数と偽答の数が多くなければならないし、
自分だけが知っているエピソード記憶をうまく秘密の質問にするにはコツが必要である。
良い秘密の質問を作る方法に関してはで議論するが、
すべての質問を公開するのが心配な場合や、
秘密の質問の数や質がが充分でないと感じられる場合は
やの手法で運用し、
徐々に運用方法を変えていけば良いだろう。

秘密の質問の強度





パスワードは長年利用されているため
強度や実際の運用に関して多くの研究が存在するが


、秘密の質問の強度に関しては充分研究されていない。
EpisoPassの運用実績は長くないが安全性などについて考察を行なう。

EpisoPassで
選択枝が10個の秘密の質問を8個使用する場合、
総当たりでパスワードを生成するには
1億()通りの試行が必要であり、

エントロピーは26.6ビットとなる。
英字からランダムに8文字を並べて作成したパスワードのエントロピーは37.6ビットになるが、
``pmvixuzq''のように全く意味のないパスワードを記憶して利用することは少ないため、
実際に利用されるパスワードのエントロピーは20ビット程度と考えられているので、
秘密の質問と選択枝の数を10個程度用意すれば
通常のパスワードと同程度の強度が期待できることになる。

総当たり攻撃が可能なオフライン運用ではエントロピーの大きさは重要であるが、
オンラインサービスでは
パスワード入力を何度か間違えるとサービスがブロックされるのが普通なので、
それほど長いパスワードを用意する必要は無いと考えられている。

一方、秘密の質問を利用する認証の脆弱性を利用した攻撃が近年問題になっている。
パスワードを忘れたときのために、
あらかじめ設定した秘密の質問に答えることによってパスワードをリセットできるサービスがあり、
「母親の旧姓は?」や「最初に飼ったペットの名前は?」のような
質問に対してユーザが答を登録するようになっている。
このような問題は他人が調べたり推測したりすることが容易であるうえに
秘密の質問の数は一般的に少なく、
パスワードよりも脆弱だといえる。

ユーザが作成した秘密の質問を使えばこのような問題はなくなるはずであるが、
他人に解かれにくい問題をユーザが作成することは難しく、
またユーザ自身が答を忘れてしまうことも多いと考えられている。

また、古い記憶にもとづいて作成した秘密の問題は
ユーザが想像するよりも解かれやすいという実験結果にもとづき、
忘れない秘密の質問を複数利用する方法、
問題と答を連想するために画像を利用する方法、
複数の問題を連続的に利用する手法などが提案されている。

EpisoPassでは、
他人には解くことが難しく自分では忘れないような秘密の質問を自由にいくつでも利用できるようになっている。
問題作成に慣れていないユーザには有効な秘密の質問を作成することは難しいかもしれないが、
次節で述べるように、適切な質問を選ぶことによりこの問題を解決できるはずである。

秘密の質問の選択


EpisoPass利用において秘密の質問の選択は非常に重要である。
他人が推測することが難しく、自分が決して忘れないようなエピソード記憶を秘密の質問として利用すべきであり、
以下のような性質をもつ記憶は秘密の質問として利用すべきではない。


自慢になるもの
(何かの機会にうっかり他人に話してしまう可能性がある)


ネット上に記録が残っているもの


他人と情報を共有しているもの


趣味や嗜好に関連するもの
(他人に推測されやすいうえに嗜好が変化する可能性がある)




このようなものではなく、
「わざわざ人に話すことはないが自分の記憶に強く残っているような無難なエピソード記憶」を
秘密の質問として利用するのが良いであろう。
具体例としては以下のようなものがある。


昔のちょっとした怪我の場所や種類


昔のちょっと悔しい思い出


昔何かを見つけた場所


たとえば図のような秘密の質問は他人に話したことが無いが、
痛い思いをしたことは忘れないし、
偽答を作成するのも簡単なので、
認証のための秘密の質問として適切であると考えられる。
















偽答の作成方法

秘密の質問の種類によっては偽答の生成が難しい場合がある。
図は電子工作に関する秘密の質問の例であるが、
正答と区別がつかない偽答を充分リストすることは難しい。







一方、正答として人名や地名を利用する場合、
正答に似た人名や地名をリストすることは難しくない。
「世田谷」が正答であるとき、
「目黒」「杉並」のような偽答を用意するのは簡単である。

正答と同じカテゴリに属する単語を自動的にリストすることができれば
正答をもとにして簡単に偽答のリストを生成することができる。

ひとつの単語もしくは単語の集合と同じカテゴリに属する単語を検索する手法は
「同位語検索」と呼ばれ、
Webのデータを利用した様々な同位語検索システムが提案されている




。
たとえば「ライバルサーチ『やーやら』」は、
Web上の「AやBが」のような表現を抽出することによって
AとBのカテゴリが近いことを判断している。

人名や地名の偽答を作成したい場合は
人名や地名のデータベースを利用して偽答を生成することができる。
市町村の人口ランキングや位置関係のデータなどを利用すれば
似た地名を偽答としてリストすることが可能であるし、
人名ランキングを利用すれば
似た苗字を偽答とすることができる。
たとえば日本の名字ランキングの40位近辺に
「長谷川」「近藤」「石井」「斉藤」「坂本」「遠藤」「藤井」
などの名字があるので、
「石井」が正答のときこれらの名字を偽答にすればよい。
しかし、
「小学生のとき〜だった同級生は誰?」という秘密の質問の正答が「石井」であるとき
この方法で偽答を生成すると、
「長谷川」「近藤」などの同級生の存在を確認することにより
正答が「石井」であることが判明してしまう可能性があるので注意が必要である。







パスワード漏洩時の問題

秘密の質問を公開している場合、
シード文字列とパスワードの対応がひとつでも漏洩してしまうと、
総当たり計算でチェックすることにより、
すべて秘密の質問の正答が判明してしまう。
秘密の質問の正答を知っていれば
シード文字列からパスワードを計算することができるので、
漏洩した秘密の質問は利用不可能になってしまう。

や
のような運用をしている場合は
パスワードがひとつ漏洩しても他のパスワードは安全だが、
のような運用をしている場合は
ひとつでもパスワードが漏洩するとあらゆるパスワードが漏洩してしまうことになる。

通常のWebサービスなどのパスワードが漏洩することは考えにくいが、
「自転車の鍵番号」のように
家族などで共有する可能性があるものに対して
のような運用を行なうと、
鍵番号を知っている人物が総当たり攻撃を行なうことによって
秘密の質問の答が判明してしまう。

シード文字列や秘密の質問を秘密情報として扱わない場合は
パスワードを他人と共有しないように注意する必要がある。

正答の指定手法について

EpisoPassでは秘密の質問の答をリストから選択する方法をとっているが、
秘密の質問によってパスワードを回復できるWebサービスなどでは
ユーザが回答文字列を入力する方法をとっているものが多い。
リストから答を選択するよりも文字列を入力する方がより安全と思われるが、
文字端末でのコマンド入力がGUIのメニュー操作より難しいのと同様に、
入力するテキストを忘れたり間違えたりする可能性が高くなってしまうというデメリットがある。
「日本の首都は?」のような簡単な質問であっても
「東京」「Tokyo」「tokyo」「toukyou」のどれが正解か迷うかもしれない。
自由なテキスト入力を行なうよりも、
選択式の回答を多数提示して選択させる方が高速に誤りのない操作が可能であり、
利便性が高く充分安全な運用が可能である。













画像認証の利用

忘れにくいエピソード記憶を利用する認証手法として
様々な画像認証システムが提案されている。
複数の画像の中から正答を選択するもの(Cognometric方式)、
ひとつの画像の中の特定の場所を指定するもの(Locimetric方式)、
画像の上で描画操作を行なうもの(Drawmetric方式)
が広く利用されているが、
EpisoPassは図のように
文字列のかわりに画像URLを秘密の質問として利用する点が異なっている。

Cognometric方式はエピソード記憶を効果的に利用できるが、
多数の偽答画像が必要だという問題がある。
Locimetric方式は
エピソード記憶を効果的に利用できないことに加え、
クリックしやすい「ホットスポット」は限られているため
充分なエントロピーを確保できないことが問題になる。
またDrawmetric方式もエピソード記憶を効果的に利用できないし、
ユーザは似た傾向のストロークを選びがちであるため
充分なエントロピーを確保しにくいことが知られている。

EpisoPassのように画像を秘密の質問として利用する場合、
通常の秘密の質問の場合と同様に偽答を増やすことが容易であることに加え、
画像に関連したエピソード記憶を有効に利用できるという利点がある。

図は
本棚.org
のユーザのひとり 

が利用している画像認証問題である。
このユーザ以外には正答は見当もつかないが、
本人にとっては忘れることがないエピソード記憶と結びついた画像だということであった。





















結論

エピソード記憶に結びついた秘密の質問を利用してパスワードを生成/管理できるシステムEpisoPassを提案した。
EpisoPassは単純な原理にもとづいており柔軟な利用形態が可能であり、
強力な秘密の質問を用意することにより
秘密情報を全く覚えることなく安全な認証を行なうことができる。

強力な秘密の質問を作成して安全に運用が可能かどうかを長期的に評価したいと考えている。







EpisoPassはhttp://Episopass.com/で運用しており、
ソースはGitHubで公開している 

。


jwiss



附録: パスワード計算アルゴリズム

パスワードは、
秘密の質問と回答の組合せにもとづいてシード文字列を換字することによって計算される。
換字は文字種ごとに行なわれる。
たとえば
シード文字列の1桁目が数字のときはパスワードの1桁目は数字に変換され、
シード文字列の1桁目が記号のときはパスワードの1桁目は記号に変換される。

シード文字列内の数字は、換字関数によってパスワード内の数字に変換される。
 は以下のような関数である。



ここではシード文字列と回答の組み合わせから計算される自然数で、
答の選択により変化する。
たとえば のとき、 となるので、
との対応は以下のようになる。








はにより変化するので、がわからなければもわからない。
はシード文字列と回答の組み合わせから計算される自然数なので、
シード文字列の答を知らなければを計算することはできず、
問題と答の組み合わせを知らない限りシード文字列からパスワードを計算することはできない。

EpisoPassでは以下のようにしてを計算している。


問題文字列と選択した答の文字列の組を連結して長い文字列を生成


のMD5ハッシュ値(16進32桁の文字列)を計算


シード文字列の桁目の文字に対し、
の文字目から文字目までの部分文字列(16進4桁)を取得し、
それをとする

たとえばハッシュ値がだったとき、1桁目を計算するについてはN=0x1234となる。



